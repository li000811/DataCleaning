/*
Cleaning Data in SQL Queries
*/

SELECT *
FROM PortfolioProject.dbo.HousingDataCleaning

--Update blank cells to null
UPDATE PortfolioProject..HousingDataCleaning
SET PropertyAddress = NULLIF(PropertyAddress, '')
WHERE PropertyAddress = ''

UPDATE PortfolioProject..HousingDataCleaning
SET Acreage = NULLIF(Acreage, '')
WHERE Acreage = ''

UPDATE PortfolioProject..HousingDataCleaning
SET TaxDistrict = NULLIF(TaxDistrict, '')
WHERE TaxDistrict = ''

UPDATE PortfolioProject..HousingDataCleaning
SET LandValue = NULLIF(LandValue, '')
WHERE LandValue = ''

UPDATE PortfolioProject..HousingDataCleaning
SET BuildingValue = NULLIF(BuildingValue, '')
WHERE BuildingValue = ''

UPDATE PortfolioProject..HousingDataCleaning
SET TotalValue = NULLIF(TotalValue, '')
WHERE TotalValue = ''

UPDATE PortfolioProject..HousingDataCleaning
SET YearBuilt = NULLIF(YearBuilt, ''), Bedrooms = NULLIF(Bedrooms, ''), FullBath = NULLIF(FullBath, ''), HalfBath = NULLIF(HalfBath, '')
WHERE YearBuilt= '' OR Bedrooms = '' OR FullBath = '' OR HalfBath = ''

--Standardize Data Format and Data Type of SaleDate
--ALTER TABLE PortfolioProject.dbo.HousingDataCleaning
--ADD SaleDateConverted Date;

--UPDATE PortfolioProject.dbo.HousingDataCleaning
--SET SaleDateConverted = CONVERT(DATE, SaleDate)

SELECT SaleDate, CAST(SaleDate AS date) AS SaleDateConverted
FROM PortfolioProject.dbo.HousingDataCleaning
WHERE SaleDate IS NOT NULL AND ISDATE(SaleDate) = 1

--Populate Property Address Data
SELECT A.ParcelID, A.PropertyAddress, B.ParcelID, B.PropertyAddress, ISNULL(A.PropertyAddress, B.PropertyAddress)
FROM PortfolioProject.dbo.HousingDataCleaning A
JOIN PortfolioProject.dbo.HousingDataCleaning B
ON A.ParcelID=B.ParcelID
AND A.[UniqueID ] <> B.[UniqueID ]
WHERE A.PropertyAddress IS NULL

UPDATE A 
SET PropertyAddress = ISNULL(A.PropertyAddress, B.PropertyAddress)
FROM PortfolioProject.dbo.HousingDataCleaning A
JOIN PortfolioProject.dbo.HousingDataCleaning B
ON A.ParcelID=B.ParcelID
AND A.[UniqueID ] <> B.[UniqueID ]
WHERE A.PropertyAddress IS NULL

--Breaking out Address into Individual Columns (Address, City)
SELECT PropertyAddress 
FROM PortfolioProject.dbo.HousingDataCleaning

SELECT
PARSENAME(REPLACE(PropertyAddress, ',', '.'), 2)
, PARSENAME(REPLACE(PropertyAddress, ',', '.'), 1)
FROM PortfolioProject.dbo.HousingDataCleaning

ALTER TABLE PortfolioProject.dbo.HousingDataCleaning
ADD PropertySplitAddress nvarchar(255);

UPDATE PortfolioProject.dbo.HousingDataCleaning
SET PropertySplitAddress = PARSENAME(REPLACE(PropertyAddress, ',', '.'), 2)

ALTER TABLE PortfolioProject.dbo.HousingDataCleaning
ADD PropertySplitCity nvarchar(255);

UPDATE PortfolioProject.dbo.HousingDataCleaning
SET PropertySplitCity = PARSENAME(REPLACE(PropertyAddress, ',', '.'), 1)

SELECT *
FROM PortfolioProject.dbo.HousingDataCleaning


----using SUBSTRING to split address, this method is more complicated than the way above
--SELECT
--SUBSTRING(PropertyAddress, 1, CHARINDEX('.', PropertyAddress)-1) AS Address
--, SUBSTRING(PropertyAddress, CHARINDEX('.', PropertyAddress)+1, LEN(PropertyAddress)) as Address
--FROM PortfolioProject.dbo.HousingDataCleaning

--ALTER TABLE PortfolioProject.dbo.HousingDataCleaning
--ADD PropertySplitAddress nvarchar(255);

--UPDATE PortfolioProject.dbo.HousingDataCleaning
--SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX('.', PropertyAddress)-1)

--ALTER TABLE PortfolioProject.dbo.HousingDataCleaning
--ADD PropertySplitCity nvarchar(255);

--UPDATE PortfolioProject.dbo.HousingDataCleaning
--SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX('.', PropertyAddress)+1, LEN(PropertyAddress))


--change y, n to yes, no in 'SoldAsVacant)

SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM PortfolioProject.dbo.HousingDataCleaning
GROUP BY SoldAsVacant
ORDER BY 2

SELECT SoldAsVacant
, CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
       WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
FROM PortfolioProject.dbo.HousingDataCleaning

UPDATE PortfolioProject.dbo.HousingDataCleaning
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
       WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

----REMOVE DUPLICATES
--WITH RowNumCTE AS(
--SELECT *, 
--ROW_NUMBER() OVER (
--PARTITION BY ParchelID,
--             PropertyAddress,
--			 SalePrice,
--			 SaleDate,
--			 LegalReference
--			 ORDER BY UniqueID
--			 ) ROW_NUM
--FROM PortfolioProject.dbo.HousingDataCleaning
--)
--DELETE
--FROM RowNumCTE
--WHERE ROW_NUM >1


--DELETE UNUSED COLUMNS
SELECT *
FROM PortfolioProject.dbo.HousingDataCleaning

ALTER TABLE PortfolioProject.dbo.HousingDataCleaning
DROP COLUMN PropertyAddress, TaxDistrict